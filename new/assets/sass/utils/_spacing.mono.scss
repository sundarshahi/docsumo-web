// Generates semantic spacing classes for padding and margin
// Marginal increment is 4.
// Example:
// .m-1 { margin: var(--ds-spacing-1); // 4px }
// .mt-1 { margin-top: var(--ds-spacing-1); // 4px }
// .mb-1 { margin-bottom: var(--ds-spacing-1); // 4px }
// .ml-1 { margin-left: var(--ds-spacing-1); // 4px }
// .mr-1 { margin-right: var(--ds-spacing-1); // 4px }

$map-spacing: (
  0: 0,
  1: var(--ds-spacing-1),
  2: var(--ds-spacing-2),
  3: var(--ds-spacing-3),
  4: var(--ds-spacing-4),
  5: var(--ds-spacing-5),
  6: var(--ds-spacing-6),
  7: var(--ds-spacing-7),
  8: var(--ds-spacing-8),
  9: var(--ds-spacing-9),
  10: var(--ds-spacing-10),
  11: var(--ds-spacing-11),
  12: var(--ds-spacing-12),
  auto: auto,
);

$map-sides: (top, bottom, left, right, x, y, all);

@each $name, $space in $map-spacing {
  @each $side in $map-sides {
    @if $side == 'all' {
      .m-#{$name} {
        margin: #{$space};
      }

      .p-#{$name} {
        padding: #{$space};
      }
    } @else if($side == 'x') {
      .m#{str-slice($side, 0, 1)}-#{$name} {
        margin-left: #{$space};
        margin-right: #{$space};
      }

      .p#{str-slice($side, 0, 1)}-#{$name} {
        padding-left: #{$space};
        padding-right: #{$space};
      }
    } @else if($side == 'y') {
      .m#{str-slice($side, 0, 1)}-#{$name} {
        margin-top: #{$space};
        margin-bottom: #{$space};
      }

      .p#{str-slice($side, 0, 1)}-#{$name} {
        padding-top: #{$space};
        padding-bottom: #{$space};
      }
    } @else {
      .m#{str-slice($side, 0, 1)}-#{$name} {
        margin-#{$side}: #{$space};
      }

      .p#{str-slice($side, 0, 1)}-#{$name} {
        padding-#{$side}: #{$space};
      }
    }
  }
}
